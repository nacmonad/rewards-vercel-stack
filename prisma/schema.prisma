//don't forget 
//npx prisma generate
//npx prisma db push

//debug with 
//npx prisma studio
// schema.prisma

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

// Define default user roles
enum DefaultUserRole {
  ADMIN
  SALES
  CUSTOMER
}

// Define the User Role entity
model UserRole {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  User        User[]
}

// Define the User entity
model User {
  id         Int          @id @default(autoincrement())
  name       String
  email      String       @unique
  password   String
  roleId     Int
  role       UserRole     @relation(fields: [roleId], references: [id])
  points     Point[]      @relation("owner")
  issued     Point[]      @relation("issuer")
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())
  Redemption Redemption[]
}

// Define the Point entity
model Point {
  id            Int          @id @default(autoincrement())
  code          String       @unique
  issuerId      Int
  initialAmount Int
  currentAmount Int
  issuer        User         @relation("issuer", fields: [issuerId], references: [id])
  ownerId       Int?
  owner         User?        @relation("owner", fields: [ownerId], references: [id])
  awardedAt     DateTime?
  expiresAt     DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  Redemption    Redemption[]
}

model Redemption {
  id             Int      @id @default(autoincrement())
  redeemedAt     DateTime @default(now())
  redeemedAmount Int
  point          Point    @relation(fields: [pointId], references: [id])
  pointId        Int
  redeemedBy     User     @relation(fields: [redeemedById], references: [id])
  redeemedById   Int
}
